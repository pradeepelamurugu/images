4)KNN

%matplotlib inline
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
iris= load_iris()

type(iris)

iris.data

print(iris.feature_names)

print(iris.target)

print(iris.target_names)

plt.scatter(iris.data[:,0],iris.data[:,1],c=iris.target, cmap=plt.cm.Paired)
plt.xlabel(iris.feature_names[0])
plt.ylabel(iris.feature_names[1])
plt.show()

plt.scatter(iris.data[:,2],iris.data[:,3],c=iris.target, cmap=plt.cm.Paired)
plt.xlabel(iris.feature_names[2])
plt.ylabel(iris.feature_names[3])
plt.show()

p = iris.data
q = iris.target
data = np.c_[iris.data, iris.target]
columns = np.append(iris.feature_names,["target"])
df = pd.DataFrame(data,columns=columns)
print(df)

df[iris.feature_names].describe()

sns.heatmap(df[iris.feature_names].corr(),annot=True)
plt.plot()

sns.boxplot(x="target",y="petal length (cm)",data=df)

sns.boxplot(x="target",y="petal width (cm)",data=df)

sns.stripplot(x="target", y="petal length (cm)", data=df, jitter=True, edgecolor="gray")

sns.pairplot(df, hue="target", size=4)

from sklearn.model_selection import train_test_split
p_train,p_test,q_train,q_test = train_test_split(p,q,test_size=0.2,random_state=4)
print(p_train.shape)
print(p_test.shape)
print(q_train.shape)
print(q_test.shape)

from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics

k_range = range(1,26)
scores_list = []
for k in k_range:
        knn = KNeighborsClassifier(n_neighbors=k)
        knn.fit(p_train,q_train)
        q_pred=knn.predict(p_test)
        scores_list.append(metrics.accuracy_score(q_test,q_pred))

plt.plot(k_range,scores_list)
plt.xlabel('k value for KNN')
plt.ylabel('Accuracy on dataset')

from sklearn.model_selection import cross_val_score
scores={}
cv_scores=[]
for k in k_range:
  knn=KNeighborsClassifier(n_neighbors=k)
  scores[k]=cross_val_score(knn,p_train,q_train,cv=10,scoring='accuracy').mean()
  cv_scores.append(scores[k])
MSE= [1-x for x in cv_scores]

plt.title('The optimal number of neighbors')
plt.xlabel('Number of neighbors K')
plt.ylabel('Misclassification error')
plt.plot(k_range, MSE)
plt.show()

maximum = max(scores, key=scores.get)
print("Maximum value:",maximum)

knn = KNeighborsClassifier(n_neighbors=12)
knn.fit(p_train,q_train)
y_pred = knn.predict(p_test)
metrics.confusion_matrix(q_test,y_pred)
metrics.accuracy_score(q_test,y_pred)